open util/ordering[Temp] as temp

sig Temp{}
abstract sig ValvePos {}
one sig OPEN, HALF, CLOSED extends ValvePos {}

conc state HeatingSystem {
	env event Reset {}
	env event TurnOn {}
	env event furnaceFault {}
	env event userReset {}
	env event heatSwitchOn {}

	event activate {}
	event deactivate {}
	event furnaceRunning {}
	event furnaceNotRunning {}
        event furnaceReset {}

	default state Functioning {
		conc state Furnace {
			default state Furnace_Normal {
				default state Furnace_Off {
					trans T1 {
						on activate
						goto Furnace_Activating
					}
				}
				state Furnace_Activating {
					trans T2 {
						on deactivate
						goto Furnace_Off
					}
					trans T3 {
						send furnaceRunning
						goto Furnace_Running 
					}
				}
				state Furnace_Running {
					trans T4 {
						on deactivate
						goto Furnace_Off					
					}
					trans T5 {
						on furnaceFault
						goto HeatingSystem/ERROR
					}
				}
			}	
		}
	
		conc state Controller {
			controllerOn: one Identifier
			condition heatRequested [some r: Identifier | Functioning/Room[r]/requestHeat = True] {}
			condition noHeatRequested [no r: Identifier |  Functioning/Room[r]/requestHeat = True] {}

			default state Off {
				trans T8 {
					on heatSwitchOn
					send furnaceReset
					do controllerOn' = True
					goto On
				}
			}
		
			state On {
				default state Idle {
					trans T9 {
						when heatRequested
						send activate
						goto Heater_Active
					}
				}
				state Heater_Active {
					trans T10 {
						when noHeatRequested
						send deactivate
						goto Idle
					}
					trans T11 {
						on furnaceFault
						do controllerOn' = False
						goto HeatingSystem/ERROR
					}
				}
			}

			init {
				controllerOn = False
			}	
		}
	
		conc state Room [Identifier] {
			actualTemp: one Temp
			desiredTemp: one Temp
			valvePos: one ValvePos
			requestHeat: one Bool
	
			env event waitedForWarmth {}
			env event waitedForCool {}
	
			condition tooCold [lt[actualTemp, desiredTemp]] {}
			condition tooHot [gt[actualTemp, desiredTemp]] {}
			condition vOpen [valvePos = OPEN] {}
			condition vClosed [valvePos = CLOSED] {}
			condition controllerOn[Functioning/Controller/controllerOn = True] {}
			action rH [requestHeat' = True] {}
			action cancelrH [requestHeat' = False] {}
	
			default state No_Heat_Request {
				default state Idle_No_Heat {
					trans T12 {
						when tooCold
						goto Wait_For_Heat
					}
					trans coolRoom {
						when !tooCold
						do actualTemp' = temp/prev[actualTemp]
					}
				}
				state Wait_For_Heat {
					trans T13 {
						when !(tooCold)
						goto Idle_No_Heat
					}
					trans T14 {
						on waitedForWarmth
						when valvePos = CLOSED
						do valvePos' = OPEN
					}
					trans T15 {
						when vOpen and controllerOn
						do rH
						goto Heat_Requested
					}
				}
			}
			
			state Heat_Requested {
				default state Idle_Heating {
					trans T15 {
						when tooHot
						do valvePos' = CLOSED
						goto Wait_For_Cool
					}
					trans heatRoom {
						when !(tooHot)
						do actualTemp' = temp/next[actualTemp]
					}
				}
	
				state Wait_For_Cool {
					trans T16 {
						when !(tooHot)
						goto Idle_Heating
					}
					trans T17 {
						on waitedForCool
						do valvePos' = CLOSED
					}
					trans T18 {
						on waitedForCool
						when vClosed
						do {
							cancelrH
							actualTemp' = desiredTemp
						}
						goto No_Heat_Request
					}
				}
			}
			
			init {
				requestHeat = False
				valvePos = CLOSED
			}
		}
	}

	state ERROR {
		trans T19 {
			on heatSwitchOn
			goto Functioning
		}
	}
}

assert FurnaceActivates {
	(no s0: Snapshot | (HeatingSystem_ERROR in s0.conf0)) => 
	(some s1: Snapshot | HeatingSystem_Functioning_Furnace_Furnace_Normal_Furnace_Activating_T3 in s1.taken0)
}

assert heaterOnIfNotDesiredTemp{
    (no s0: Snapshot | (HeatingSystem_ERROR in s0.conf0)) =>
    (some s0: one Snapshot,p0: one Identifier | lt[p0.(s0.HeatingSystem_Functioning_Room_actualTemp), p0.(s0.HeatingSystem_Functioning_Room_actualTemp)] => 
	(some s1: nexts[s0] | HeatingSystem_Functioning_Controller_On_Heater_Active in s1.conf0))
}

check heaterOnIfNotDesiredTemp for 25 Snapshot, exactly 2 Identifier, exactly 4 Temp
check heaterOnIfNotDesiredTemp for 30 Snapshot, exactly 3 Identifier, exactly 4 Temp
check FurnaceActivates for 25 Snapshot, exactly 2 Identifier, exactly 4 Temp
check FurnaceActivates for 30 Snapshot, exactly 3 Identifier, exactly 4 Temp

