open util/ordering[Floor]

sig Floor {}
abstract sig Direction {}
one sig Up, Down extends Direction {}

pred between [n1, nb, n2: Floor] {
	     lt[n1,n2] =>   ( lt[n1,nb] && lt[nb,n2] )
             else ( lt[n1,nb] || lt[nb,n2] )  }

conc state System {
	conc state Controller {
		callToSend: Floor -> Direction

		default state Sending {}

		action SendUpRequest [
			one e0: PID, f: callToSend.Up | {
				// The direction of the Elevator is "Up"
				Elevator[e0]/direction = Up
				// The elevator is below the floor that it needs to go to
				lte[Elevator[e0]/current, f]
				// Send the call to the elevator
				Elevator[e0]/called' = Elevator[e0]/called + f
				callToSend' = callToSend - (f -> Up)
				// Elevator getting the call is the closest
				no e1: PID - e0 | { Elevator[e1]/direction = Up and 
					between[Elevator[e0]/current, Elevator[e1]/current, f] }
				all others: PID - e0 | Elevator[others]/called' = Elevator[others]/called
			}
		] {}

		action SendDownRequest [
			one e0: PID, f: callToSend.Down | {
				Elevator[e0]/direction = Down
				gte[Elevator[e0]/current, f]
				Elevator[e0]/called' = Elevator[e0]/called + f
				callToSend' = callToSend - (f -> Down)
				no e1: PID - e0 | Elevator[e1]/direction = Down and between[f, Elevator[e0]/current, Elevator[e1]/current]
				all others: PID - e0 | Elevator[others]/called' = Elevator[others]/called
			}
		] {}

		action SendRequest [
			one e0: PID, f: callToSend.Direction | {
				Elevator[e0]/called' = Elevator[e0]/called + f
				callToSend' = callToSend - (f -> f.callToSend)
				all others: PID - e0 | Elevator[others]/called' = Elevator[others]/called	
			}
		] {}

		trans SendingUpRequest {
			from Sending
			when Up in Floor.callToSend
			do {
				(some p: PID, f: callToSend.Up | lte[Elevator[p]/current, f] and Elevator[p]/direction = Up) => {
					SendUpRequest
				} else {
					SendRequest
				}
			}
			goto Sending
		}

		trans SendingDownRequest {
			from Sending
			when Down in Floor.callToSend
			do {
				(some p: PID, f: callToSend.Down | lte[f, Elevator[p]/current] and Elevator[p]/direction = Down) => {
					SendDownRequest
				} else {
					SendRequest
				}
			}
			goto Sending
		}

		init {
			#callToSend = 3
			Up !in Floor.callToSend
		}
	}

	conc state Elevator [PID] {
		direction: one Direction
		called: set Floor
	 	current: one Floor

	       state MovingUp {
		 	trans MoveUp {
		        	when {
		            		some called
		            		direction = Up
		            		some nexts[current] & called
			    		current !in called
		        	}
		        	do {
		            		current' = min[(nexts[current] & called)]
		            		called' = called - current'
		        	}
		   	 }

			trans ElevatorInCalled {
				when {
					some called
					called in current
				}
				do {
					called' = called - current
				}
			}

			trans ChangeDirToDown {
		        	when {
		            		some called
					no nexts[current] & called
					some prevs[current] & called
					current !in called
		        	}
				do {
					direction' = Down
				}
				goto MovingDown
			}
	
		 	trans Idle {
				when {
		            		no called
		        	}
				do {
					current = min[Floor]
				}
				goto Idle
	         	}
	    }
	
	    state MovingDown {
		 	trans MoveDown {
		        	when {
		            		some called
		            		direction = Down
		            		some prevs[current] & called
			    		current !in called
		        	}
		        	do {
		            		current' = max[(prevs[current] & called)]
		            		called' = called - current'
		        	}
		   	 }

			trans ElevatorInCalled {
				when {
					some called
					called in current
				}
				do {
					called' = called - current
				}
			}

			trans ChangeDirToUp {
		        	when {
		            		some called
					no prevs[current] & called
					some nexts[current] & called
					current !in called
		        	}
				do {
					direction' = Up
				}
				goto MovingUp
			}
	
		 	trans Idle {
				when {
		            		no called
		        	}
				goto Idle
	         	}
	    }
	
	    default state Idle {
		 	trans DefaultToGround {
		        	when {
		            		no called
		            		min[Floor] not in current
		        	}
		        	do current' = min[Floor]
		    	}

		 	trans Move {
		        	when {
		            		some called
		        	}
		        	goto MovingUp
		    	}
		}
	}

	init {
		no called
		current = min[Floor]
		direction = Up
	}
}


assert allCallsAreEventuallySend {
	some s: Snapshot | no s.(Snapshot <: System_Controller_callToSend)
}

assert closestElevatorHasCall {
	some s: Snapshot | one e0: PID, f: Floor | (f in e0.(s.System_Elevator_called) and (e0.(s.System_Elevator_direction) = Up)
		and	(no e1: PID - e0 | (between[e0.(s.System_Elevator_current), e1.(s.System_Elevator_current), f] 
				and e1.(s.System_Elevator_direction) = Up)) )
}

check allCallsAreEventuallySend for 17 Snapshot, exactly 3 PID, exactly 4 Floor
check allCallsAreEventuallySend for 17 Snapshot, exactly 4 PID, exactly 4 Floor
check closestElevatorHasCall for 17 Snapshot, exactly 3 PID, exactly 4 Floor
check closestElevatorHasCall for 17 Snapshot, exactly 4 PID, exactly 4 Floor
