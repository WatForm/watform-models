open util/ordering[PID] as P0

conc state Counter {
	env event Tk0 {}
	event Done {}
	current: one PID

	conc state Bit [PID] {
		event Tk1 {}

		default state Bit1 {}
		state Bit2 {}

		trans currentBitToBit2{
			from Bit1
			when this in current
			on Tk0
			goto Bit2
		}

		trans currentBitToBit1 {
			from Bit2
			on Tk0
			when this in current
			goto Bit1
			send Tk1[P0/next[this]]
		}

		trans nextBitToBit2 {
 			from Bit1
			when this in P0/next[current]
			on Tk1
			goto Bit2
		}

		trans nextBitToBit1 {
			from Bit2
			when {
				 this in P0/next[current]
				 P0/next[current] !in P0/last
			}
			on Tk1
			do current' = P0/next[current]
			goto Bit1
		}

		trans lastBitDone {
			from Bit2
			when this in P0/last
			on Tk1
			goto Bit1
			send Done
		}

		init {
			current = P0/first
		}
	}
}

// remember to have Electrum option set 

assert allBitsInBit0 {
	eventually Counter_Done in events0 and 
		(some p: PID | Counter_Bit_Bit1 in p.(conf1))
}

check allBitsInBit0 for 12 steps, exactly 3 PID
check allBitsInBit0 for 20 steps, exactly 4 PID
