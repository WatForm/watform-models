open util/ordering[Identifier] as P0

// Returns the first node if current node is the last Node in the ordering
fun nextProcess [ie: Identifier] : lone Identifier  {
	{m: Identifier | no P0/next[ie] implies m = P0/first
		else m = P0/next[ie]
	}
}

state System {
	elected: set Identifier

	conc Process [Identifier] {
		succ: one Identifier
		token: buf[Identifier]

		default state Electing {
			trans PassToken {
				when {
					no elected
					some token.elems
					lt[this, token.firstElem]
				}
				do {
					Process[succ]/token.addFirst[token.firstElem] // Pass the token
					all others: Identifier - succ | Process[others]/token' = Process[others]/token
				}
			}

			trans ConsumeToken {
				when {
					no elected
					some token.elems
					gt[this, token.firstElem]
				}
				do {
					token.removeFirst // Consume the Token
				}
			}			

			trans ElectLeader {
				when {
					no elected
					token.firstElem = this
				}
				do {
					elected' =  this // Elect Leader
				}
				goto Elected
			}
		}

		state Elected {}

		init {
			one token
			succ = nextProcess[this]
			Process[succ]/token.firstElem = this
		}
	}

	init {
		no elected
	}
}


assert ctl_eventuallyLeaderElected {
	ctl_mc[af[{s: Snapshot | some s.System_elected}]]
}

assert ctl_electedHasHighestIdentifier {
    ctl_mc[af[{s: one Snapshot | some s.System_elected => (s.System_elected) in P0/last}]]
}

check ctl_electedHasHighestIdentifier for exactly 13 Snapshot, exactly 6 Identifier, exactly 6 token, 1 PathNode
check ctl_electedHasHighestIdentifier for exactly 15 Snapshot, exactly 7 Identifier, exactly 7 token, 1 PathNode
