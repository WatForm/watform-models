open util/traces[Level] as nodeLevel

sig Level {}

state DistrubedTreeSpanning {
	root: one Node

	conc N [Node] {
	        level: lone Level
	        parent: lone Node
		message: Node -> Level

		action sendMessage [
			one n: Node - this | {
				no N[n]/message
				N[n]/message' = this -> level
				all others: Node - n | N[others]/message' = N[others]/message
			}
		] {}
	
	        default state Unassigned {
			trans RootAssign {
				when {
					this in root
				}
				do {
					level' = nodeLevel/first
					parent' = this
				}
				goto Assigned
			}

			trans NodeAssign {
				when {
					some message
				}
				do {
					level' = nodeLevel/next[Node.message]
					parent' = message.Level
				}
				goto Assigned
			}
		}

		state Assigned {
			trans sendMessage {
				when {
					some n: Node | no N[n]/level
				}
				do {
					(sendMessage)
				}
			}
		}

		init {
			no level
			no parent
			no message
		}
	}
}

assert noCycles {
	(all s: Snapshot | all n: Node -  s.DistrubedTreeSpanning_root | n !in n.(^(~(s.DistrubedTreeSpanning_N_parent))))
}

assert topologyOverAllNodes {
	some s: Snapshot | all n: Node | some n.(s.DistrubedTreeSpanning_N_level)
}

check noCycles for 9 Snapshot, exactly 4 Node, exactly 4 Level
check noCycles for 11 Snapshot, exactly 5 Node, exactly 5 Level
check noCycles for 13 Snapshot, exactly 6 Node, exactly 6 Level
check topologyOverAllNodes for 9 Snapshot, exactly 4 Node, exactly 4 Level
check topologyOverAllNodes for 11 Snapshot, exactly 5 Node, exactly 5 Level
check topologyOverAllNodes for 13 Snapshot, exactly 6 Node, exactly 6 Level
