open util/ordering[PID] as P0

state Counter {
	env event Tk0 {}
	event Done {}
	current: one PID

	conc Bit [PID] {
		event Tk1 {}

		default state Bit1 {}
		state Bit2 {}

		trans currentBitToBit2{
			from Bit1
			when thisBit in current
			on Tk0
			goto Bit2
		}

		trans currentBitToBit1 {
			from Bit2
			on Tk0
			when thisBit in current
			goto Bit1
			send Bit[P0/next[thisBit]]/Tk1
		}

		trans nextBitToBit2 {
 			from Bit1
			when thisBit in P0/next[current]
			on Tk1
			goto Bit2
		}

		trans nextBitToBit1 {
			from Bit2
			when {
				 thisBit in P0/next[current]
				 P0/next[current] !in P0/last
			}
			on Tk1
			do current' = P0/next[current]
			goto Bit1
		}

		trans lastBitDone {
			from Bit2
			when thisBit in P0/last
			on Tk1
			goto Bit1
			send Done
		}

		init {
			current = P0/first
		}
	}
}