open util/ordering[Node] as node

abstract sig Status {}
one sig Stabilizing, Rectifying extends Status{}

pred between [n1, nb, n2: Node] {
	     lt[n1,n2] =>   ( lt[n1,nb] && lt[nb,n2] )
             else ( lt[n1,nb] || lt[nb,n2] )  }

// Returns the first node if current node is the last Node in the ordering
fun nextNode [n: Node] : lone Node  {
	{m: Node | no node/next[n] implies m = node/first
		else m = node/next[n]
	}
}

// Returns the previous node in the ordering
fun prevNode [n: Node] : lone Node  {
	{m: Node | no node/prev[n] implies m = node/last
		else m = node/prev[n]
	}
}

state System {
	members: set Node

	conc N [Node] {
		frst: lone Node
		scnd: lone Node
		prdc: lone Node
		status: Status
		saved: lone Node

		default state Live {
			trans Fail {
				when {
					// We cannot fail if it would leave a member with no successors
					all n: Node - thisN | some (members - thisN) & (N[n]/frst + N[n]/scnd)
				}
				do {
					members' = members - thisN
					frst' = {none}
					scnd' = {none}
					prdc' = {none}
					status' = {none}
				}
				goto Failed
			}

			trans StabilizeFromSucc {
				when {
					no status
				}
				do {
					// The Sucessor is dead
					frst !in members implies {
						frst' = scnd
						scnd' = nextNode[scnd]
						all n: Node | N[n]/status' = N[n]/status
						all n: Node | N[n]/saved' = N[n]/saved
					// The sucessor is a member
					} else {
						frst' = frst 
						scnd' = N[frst]/frst
						// The sucessor's predecessor is better
						(some N[frst]/prdc and between[thisN, N[frst]/prdc, frst] and (N[frst]/prdc in members)) => {
							status' = Stabilizing
							saved' = N[frst]/prdc
							all n: Node - thisN | N[n]/status' = N[n]/status
							all n: Node - thisN | N[n]/saved' = N[n]/saved
						} else (thisN !in N[frst]/prdc) => {
							N[frst]/status' = Rectifying
							N[frst]/saved' = thisN
							all n: Node - frst | N[n]/status' = N[n]/status
							all n: Node - frst | N[n]/saved' = N[n]/saved
						} else {
							all n: Node | N[n]/status' = N[n]/status
							all n: Node | N[n]/saved' = N[n]/saved
						}
					}
				}
			}

			trans StabilizeFromPrdc {
				when {
					thisN in members
					status = Stabilizing
					between[thisN, saved, frst]
				}
				do {
					no status'
					no saved'
					// The Successor's Predecessor is dead
					saved !in members implies {
						frst' = frst
						scnd' = scnd
						all n: Node - thisN | N[n]/status' = N[n]/status
						all n: Node - thisN | N[n]/saved' = N[n]/saved
					// The Successor's Predecessor is a member
					} else {
						frst' = saved
						scnd' = N[saved]/frst
						N[saved]/status' = Rectifying
						N[saved]/saved' = thisN
						all n: Node - saved - thisN | N[n]/status' = N[n]/status
						all n: Node - saved - thisN | N[n]/saved' = N[n]/saved
					}
				}
			}

			trans Rectify {
				when {
					thisN in members
					status = Rectifying
				}
				do {
					(between[prdc, saved, thisN] or prdc !in members or no prdc) => {prdc' = saved}
					else {
						prdc' = prdc
					}
				}
			}

			trans Flush {
				when {
					thisN in members
					prdc !in members
				}
				do {
					prdc' = {none}
				}
			}
		}

		state Failed {
			trans Join {
				when {
					thisN !in members
				}
				do {
					members' = members + thisN
				}
				goto Live
			}
		}

		init {
			no status
			no saved
			frst = nextNode[thisN]
			scnd = nextNode[frst]
			prdc = prevNode[thisN]
		}
	}

	init {
		// All Nodes are members initially
		Node in members
	}
}


