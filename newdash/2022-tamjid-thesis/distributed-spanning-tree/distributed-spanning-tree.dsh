open util/ordering[Level] as nodeLevel

sig Level {}

state DistrubedTreeSpanning {
	root: one Node

	conc N [Node] {
	        level: lone Level
	        parent: lone Node
		message: Node -> Level

	        default state Unassigned {
			trans RootAssign {
				when {
					thisNode in root
				}
				do {
					level' = nodeLevel/first
					parent' = thisNode
				}
				goto Assigned
			}

			trans NodeAssign {
				when {
					some message
				}
				do {
					level' = nodeLevel/next[Node.message]
					parent' = message.Level
				}
				goto Assigned
			}
		}

		state Assigned {
			trans sendMessage {
				when {
					some n: Node | no N[n]/level
				}
				do {
					some n: Node - thisNode | {
						// The sister Node has not received a message
						no N[n]/message
						// Send the sister Node a message with "this" Node's identifier and Level
						N[n]/message' = thisNode -> level
						all others: Node - n | N[others]/message' = N[others]/message
					}
				}
			}
		}

		init {
			no level
			no parent
			no message
		}
	}
}

