open util/ring[Identifier] as P0


state System {
	elected: set Identifier

	conc Process [Identifier] {
		succ: one Identifier
		token: buf[Identifier]

		default state Electing {
			trans PassToken {
				when {
					no elected
					some token.elems
					lt[thisProcess, token.firstElem]
				}
				do {
					addFirst[Process[nextRing[thisProcess]]/token, Process[nextRing[thisProcess]]/token', token.firstElem] // Pass the token
					all others: Identifier - nextRing[thisProcess] | Process[others]/token' = Process[others]/token
				}
			}

			trans ConsumeToken {
				when {
					no elected
					some token.elems
					gt[thisProcess, token.firstElem]
				}
				do {
					token'.(token.removeFirst) // Consume the Token
				}
			}			

			trans ElectLeader {
				when {
					no elected
					token.firstElem = thisProcess
				}
				do {
					elected' =  thisProcess // Elect Leader
				}
				goto Elected
			}
		}

		state Elected {}

		init {
			one token
			Process[nextRing[thisProcess]]/token.firstElem = thisProcess
		}
	}

	init {
		no elected
	}
}





