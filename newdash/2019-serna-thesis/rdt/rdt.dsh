/*******************************************************************************
 * Title: rdt.dsh
 * Authors: Jose Serna
 * Created: 03-04-2019
 * Last modified: 
 * 2023-06-7 Nancy Day modifications for new Dash
 *
 * Notes: Dash model of a Reliable Data Transfer (RDT) protocol.
 *
 *      Mitchell Kember, Lynn Tran, George Gao, and Nancy A. Day. 
 *      Extracting counterexamples from transitive-closure-based model checking. 
 *      In Workshop on Modelling in Software Engineering (MISE) @ International 
 *      Conference on Software Engineering (ICSE), pages 47--54. ACM, May 2019.
 *      https://cs.uwaterloo.ca/~nday/pdf/refereed/2019-KeTrGaDa-mise.pdf
 *
 ******************************************************************************/

state RDT {
    env event SendSuccess {}
    env event SendError {}
    env event AckSuccess {}
    env event AckError {}

    conc Sender {
        default state ReadySendNext {}
        state WaitAck {}
        state ReadyResend {}

        trans t1 {
            from ReadySendNext
            on SendSuccess
            goto WaitAck
        }

        trans t2 {
            from ReadySendNext
            on SendError
            goto WaitAck
        }

        trans t3 {
            from WaitAck
            on AckSuccess
            goto ReadySendNext
        }

        trans t4 {
            from WaitAck
            on AckError
            goto ReadyResend
        }

        trans t5 {
            from ReadyResend
            on SendSuccess
            goto WaitAck
        }

        trans t6 {
            from ReadyResend
            on SendError
            goto WaitAck
        }
    }
    conc Receiver {
        default state ReadyReceiveNext {}
        state ReceiveSuccess {}
        state ReceiveError {}
        state ReadyReceiveResend {}

        trans t7 {
            from ReadyReceiveNext
            on SendSuccess
            goto ReceiveSuccess
        }

        trans t8 {
            from ReceiveSuccess
            on AckSuccess
            goto ReadyReceiveNext
        }

        trans t9 {
            from ReceiveSuccess
            on AckError
            goto ReadyReceiveNext
        }

        trans t10 {
            from ReadyReceiveNext
            on SendError
            goto ReceiveError
        }

        trans t11 {
            from ReceiveError
            on AckError
            goto ReadyReceiveResend
        }

        trans t12 {
            from ReadyReceiveResend
            on SendError
            goto ReceiveError
        }

        trans t13 {
            from ReadyReceiveResend
            on SendSuccess
            goto ReceiveSuccess
        }
    }
}


