/*******************************************************************************
 * Title: FDG_model_logic.dsh
 * Authors: Jose Serna - jserna@uwaterloo.ca
 * Created: 2018-06-20
 * Last modified: 
 * 2023-06-07 Nancy Day small changes for new dash
 *
 * Notes: Dash model of the Mode Logic of a single sie of the Flight Guidance 
 *        System (FGS) described in "Formal Methods Case Studies for DO-333"
 *
 ******************************************************************************/
open util/boolean

/**
 *The model contains 24 boolean inputs and 29 boolean outputs
 */
state FlightModes {

    // Inputs
    env Pilot_Flying_Side: one Bool
    env Pilot_Flying_Transfer: one Bool
    env HDG_Switch_Pressed: one Bool
    env NAV_Switch_Pressed: one Bool
    env GA_Switch_Pressed: one Bool
    env When_AP_Engaged: one Bool
    env FD_Switch_Pressed: one Bool
    env Overspeed: one Bool
    env VS_Switch_Pressed: one Bool
    env FLC_Switch_Pressed: one Bool
    env ALT_Switch_Pressed: one Bool
    env APPR_Switch_Pressed: one Bool
    env VS_Pitch_Wheel_Rotated: one Bool
    env Selected_NAV_Source_Changed: one Bool
    env Selected_NAV_Frequency_Changed: one Bool
    env Is_AP_Engaged: one Bool
    env Is_Offside_FD_On: one Bool
    env LAPPR_Capture_Condition_Met: one Bool
    env SYNC_Switch_Pressed: one Bool
    env NAV_Capture_Condition_Met: one Bool
    env ALTSEL_Target_Changed: one Bool
    env ALTSEL_Capture_Condition_Met: one Bool
    env ALTSEL_Track_Condition_Met: one Bool
    env VAPPR_Capture_Condition_Met: one Bool

    // outputs
    FD_On: one Bool
    Modes_On: one Bool
    HDG_Selected : one Bool
    HDG_Active: one Bool
    NAV_Selected: one Bool
    NAV_Active: one Bool
    VS_Active: one Bool
    LAPPR_Selected: one Bool
    LAPPR_Active: one Bool
    LGA_Selected: one Bool
    LGA_Active: one Bool
    ROLL_Active: one Bool
    ROLL_Selected: one Bool
    VS_Selected: one Bool
    FLC_Selected: one Bool
    FLC_Active: one Bool
    ALT_Active: one Bool
    ALTSEL_Active: one Bool
    ALT_Selected: one Bool
    ALTSEL_Track: one Bool
    ALTSEL_Selected: one Bool
    PITCH_Selected: one Bool
    VAPPR_Selected: one Bool
    VAPPR_Active: one Bool
    VGA_Selected: one Bool
    VGA_Active: one Bool
    PITCH_Active: one Bool
    // Outputs not used on transitions
    Independent_Mode: one Bool
    Active_Side: one Bool

    init {
        FD_On = False
        Modes_On = False
        HDG_Selected  = False
        HDG_Active = False
        NAV_Selected = False
        NAV_Active = False
        VS_Active = False
        LAPPR_Selected = False
        LAPPR_Active = False
        LGA_Selected = False
        LGA_Active = False
        ROLL_Active = True // default vertical mode
        ROLL_Selected = True // default lateral mode
        VS_Selected = False
        FLC_Selected = False
        FLC_Active = False
        ALT_Active = False
        ALTSEL_Active = False
        ALT_Selected = False
        ALTSEL_Track = False
        ALTSEL_Selected = False
        PITCH_Selected = True
        VAPPR_Selected = False
        VAPPR_Active = False
        VGA_Selected = False
        VGA_Active = False
        PITCH_Active = True
        // Outputs not used on transitions
        Independent_Mode = False
        Active_Side = False
    }

    // Models the event proccessing subsystem as a group of assumptions on the inputs
    invariant EventProcessing {
        // When_AP_Engaged has no inhibitor
        When_AP_Engaged = Is_AP_Engaged
    }

    /**
     *   The order of execution on the state machine is FD, Annunciation, Lateral, Vertical.
     *   The current version of Dash does not provide a way to establish order of execution.
     */

    /**
     *   Determines whether FD is displayed on PFD
     */
    conc FD {
        pred Turn_FD_On {
            FD_Switch_Pressed = True or
            When_AP_Engaged = True or
            Overspeed = True or
            LateralModeManuallySelected or
            VerticalModeManuallySelected or
            (
                Pilot_Flying_Transfer = True and
                Pilot_Flying_Side = True and
                Modes_On = True
            )
        }

        pred LateralModeManuallySelected {
            HDG_Switch_Pressed = True or
            NAV_Switch_Pressed = True or
            APPR_Switch_Pressed = True or
            GA_Switch_Pressed = True
        }


        pred VerticalModeManuallySelected {
            VS_Switch_Pressed = True or
            FLC_Switch_Pressed = True or
            ALT_Switch_Pressed = True or
            APPR_Switch_Pressed = True or
            GA_Switch_Pressed = True or
            (
                VS_Pitch_Wheel_Rotated = True and
                VS_Active = False and
                VAPPR_Active = False and
                Overspeed = False
            )
        }

        default state OFF {}

        state ON {
            enter {
                FD_On = True
            }

            exit {
                FD_On = False
            }
        }

        trans TurnFDOn {
            from OFF
            when Turn_FD_On
            goto ON
        }

        trans TurnFDOff {
            from ON
            when {
                FD_Switch_Pressed = True and
                Overspeed = False
            }
            goto OFF
        }
    }

    /**
     * Determines whether the mode annunciations is displayed on the PFD
     */
    conc ANNUNCIATIONS {
        default state OFF {
            enter {
                Modes_On = False
            }

            exit {
                Modes_On = True
            }
        }

        state ON {
            enter {
                Modes_On = True
            }

            exit {
                Modes_On = False
            }
        }

        trans TurnAnnunciationsOn {
            from OFF
            when {
                Is_AP_Engaged = True or
                Is_Offside_FD_On = True or
                FD_On = True
            }
            goto ON
        }

        trans TurnAnnunciationsOff {
            from ON
            when {
                Is_AP_Engaged = False and
                Is_Offside_FD_On = False and
                FD_On = False
            }
            goto OFF
        }
    }

    /**
     *   Handles the lateral modes of the FGS.
     *   exactly one lateral mode should be active. The original model defines
     *   two truth tables.
     *   We will try to handle the syncronization using internal events
     */
    conc LATERAL {
        /** Used to syncrhonize the different substate machines
        */
        event New_Lateral_Mode_Activated {}

        /**
        * Turns the aircraft to the selected heading displayed on the PFD and
        * then holds the aircraft to that heading
        */
        conc HDG {
            default state CLEARED {}

            state SELECTED {
                enter {
                    HDG_Selected = True
                }

                exit {
                    HDG_Selected = False
                }

                default state ACTIVE {
                    enter {
                        HDG_Active = True
                    }

                    exit {
                        HDG_Active = False
                    }
                }
            }

            trans Select {
                from CLEARED
                when HDG_Switch_Pressed = True
                goto SELECTED
                send New_Lateral_Mode_Activated
            }

            trans Clear {
                from SELECTED
                when {
                    HDG_Switch_Pressed = True or
                    Pilot_Flying_Transfer = True or
                    Modes_On = False
                }
                goto CLEARED
            }

            trans NewLateralModeActivated {
                from SELECTED/ACTIVE
                on New_Lateral_Mode_Activated
                goto CLEARED
            }
        }

        /**
         *  Captures and tracks lateral guidance for en route navigation and
         *  non-precision approaches. It is an arming mode that must be armed before it can become active
         */
        conc NAV {
            default state CLEARED {}

            state SELECTED {
                enter {
                    NAV_Selected = True
                }

                exit {
                    NAV_Selected = False
                }

                default state ARMED {}

                state ACTIVE {
                    enter {
                        NAV_Active = True
                    }

                    exit {
                        NAV_Active = False
                    }
                }
            }

            trans Select {
                from CLEARED
                when NAV_Switch_Pressed = True
                goto SELECTED
            }

            trans Capture {
                from SELECTED/ARMED
                when NAV_Capture_Condition_Met = True
                goto SELECTED/ACTIVE
                send New_Lateral_Mode_Activated
            }

            trans Clear {
                from SELECTED
                when {
                    NAV_Switch_Pressed = True or
                    Selected_NAV_Source_Changed = True or
                    Selected_NAV_Frequency_Changed = True or
                    Pilot_Flying_Transfer = True or
                    Modes_On = False
                }
                goto CLEARED
            }

            trans NewLateralModeActivated {
                from SELECTED/ACTIVE
                on New_Lateral_Mode_Activated
                goto CLEARED
            }
        }

        /**
         * Captures and tracks lateral guidance for precision and nonprecision
         * approaches
         */
        conc LAPPR {
            default state CLEARED {}

            state SELECTED {
                enter {
                    LAPPR_Selected = True
                }

                exit {
                    LAPPR_Selected = False
                }

                default state ARMED {}

                state ACTIVE {
                    enter {
                        LAPPR_Active = True
                    }

                    exit {
                        LAPPR_Active = False
                    }
                }
            }

            trans Select {
                from CLEARED
                when APPR_Switch_Pressed = True
                goto SELECTED
            }

            trans Capture {
                from SELECTED/ARMED
                when LAPPR_Capture_Condition_Met = True
                goto SELECTED/ACTIVE
                send New_Lateral_Mode_Activated
            }

            trans Clear {
                from SELECTED
                when {
                    APPR_Switch_Pressed = True or
                    Selected_NAV_Source_Changed = True or
                    Selected_NAV_Frequency_Changed = True or
                    Pilot_Flying_Transfer = True or
                    Modes_On = False
                }
                goto CLEARED
            }

            trans NewLateralModeActivated {
                from SELECTED/ACTIVE
                on New_Lateral_Mode_Activated
                goto CLEARED
            }
        }

        /**
         * Maintains the current heading when the pilot aborts a landing. It
         * is a non-arming mode that can become the active lateral mode at any time
         */
        conc LGA {
            default state CLEARED {}

            state SELECTED {
                enter {
                    LGA_Selected = True
                }

                exit {
                    LGA_Selected = False
                }

                default state ACTIVE {
                    enter {
                        LGA_Active = True
                    }

                    exit {
                        LGA_Active = False
                    }
                }
            }

            trans Select {
                from CLEARED
                when GA_Switch_Pressed = True and Overspeed = False
                goto SELECTED
                send New_Lateral_Mode_Activated
            }

            trans Clear {
                from SELECTED
                when {
                    When_AP_Engaged = True or
                    SYNC_Switch_Pressed = True or
                    VGA_Active = False or
                    Pilot_Flying_Transfer = True or
                    Modes_On = False
                }
                goto CLEARED
            }

            trans NewLateralModeActivated {
                from SELECTED/ACTIVE
                on New_Lateral_Mode_Activated
                goto CLEARED
            }
        }

        /**
         * Holds the aircraft at the fixed bank angle it is in when the mode
         * becomes active or when the SYNC switch is pressed
         */
        conc ROLL {
            pred LateralModeActive {
                HDG_Active = True or
                NAV_Active = True or
                LAPPR_Active = True or
                LGA_Active = True
            }

            state CLEARED {}

            default state SELECTED {
                enter {
                    ROLL_Selected = True
                }

                exit {
                    ROLL_Selected = False
                }

                default state ACTIVE {
                    enter {
                        ROLL_Active = True
                    }

                    exit {
                        ROLL_Active = False
                    }
                }
            }

            trans Select {
                from CLEARED
                when !LateralModeActive
                goto SELECTED
            }

            trans Clear {
                from SELECTED/ACTIVE
                when LateralModeActive
                goto CLEARED
            }
        }
    }

    /**
     *   Controls the behavior of the aircraft about the lateral, or pitch, axis
     */
    conc VERTICAL {

        /** Used to syncrhonize the different substate machines
        */
        event New_Vertical_Mode_Activated {}

        /**
         * Holds the aircraft to the Vertical Speed (VS) reference displayed on
         * the PFD
         */
        conc VS {
            default state CLEARED {}

            state SELECTED {
                enter {
                    VS_Selected = True
                }

                exit {
                    VS_Selected = False
                }

                default state ACTIVE {
                    enter {
                        VS_Active = True
                    }

                    exit {
                        VS_Active = False
                    }
                }
            }

            trans Select {
                from CLEARED
                when {
                    VS_Switch_Pressed = True and
                    Overspeed = False and
                    VAPPR_Active = False
                }
                goto SELECTED
                send New_Vertical_Mode_Activated
            }

            trans Clear {
                from SELECTED
                when {
                    VS_Switch_Pressed = True or
                    Pilot_Flying_Transfer = True or
                    Modes_On = False
                }
                goto CLEARED
            }

            trans NewVerticalModeActivated {
                from SELECTED/ACTIVE
                on New_Vertical_Mode_Activated
                goto CLEARED
            }
        }

        /**
         * Acquires and tracks an Indicated Airspeed (IAS) or Mach Reference
         * Airspeed while also climbing or descending to bring the aircraft to
         * the Preselected Altitude
         */
        conc FLC {
            default state CLEARED {}

            state SELECTED {
                enter {
                    FLC_Selected = True
                }

                exit {
                    FLC_Selected = False
                }

                default state ACTIVE {
                    enter {
                        FLC_Active = True
                    }

                    exit {
                        FLC_Active = False
                    }
                }
            }

            trans Select {
                from CLEARED
                when {
                    (FLC_Switch_Pressed = True and VAPPR_Active = False) or
                    (
                        Overspeed = True and
                        ALT_Active = False and
                        // ALT_Will_Be_Activated = False and // TODO how to express these constraints?
                        ALTSEL_Active = False // and
                        // ALTSEL_Will_Be_Activated = False

                    )
                }
                goto SELECTED
                send New_Vertical_Mode_Activated
            }

            trans Clear {
                from SELECTED
                when {
                    (FLC_Switch_Pressed = True and Overspeed = False) or
                    (Overspeed = False and VS_Pitch_Wheel_Rotated = True) or
                    Pilot_Flying_Transfer = True or
                    Modes_On = False
                }
                goto CLEARED
            }

            trans NewVerticalModeActivated {
                from SELECTED/ACTIVE
                on New_Vertical_Mode_Activated
                goto CLEARED
            }
        }

        /**
         * Acquires and tracks the altitude reference, which is set to the current
         * altitude when the mode is activated or upon a SYNC request by the flight crew
         */
        conc ALT {
            default state CLEARED {}

            state SELECTED {
                enter {
                    ALT_Selected = True
                }

                exit {
                    ALT_Selected = False
                }

                default state ACTIVE {
                    enter {
                        ALT_Active = True
                    }

                    exit {
                        ALT_Active = False
                    }
                }
            }

            trans Select {
                from CLEARED
                when {
                    (ALT_Switch_Pressed = True and VAPPR_Active = False) or
                    (VAPPR_Active = False and ALTSEL_Target_Changed = True and ALTSEL_Track = True)
                }
                goto SELECTED
                send New_Vertical_Mode_Activated
            }

            trans Clear {
                from SELECTED
                when {
                    ALT_Switch_Pressed = True or
                    VS_Pitch_Wheel_Rotated = True or
                    Pilot_Flying_Transfer = True or
                    Modes_On = False
                }
                goto CLEARED
            }

            trans NewVerticalModeActivated {
                from SELECTED/ACTIVE
                on New_Vertical_Mode_Activated
                goto CLEARED
            }
        }

        /**
         * Captures and tracks the Preselected Altitude
         */
        conc ALTSEL {
            default state CLEARED {}

            state SELECTED {
                enter {
                    ALTSEL_Selected = True
                }

                exit {
                    ALTSEL_Selected = False
                }

                default state ARMED {}

                state ACTIVE {
                    enter {
                        ALTSEL_Active = True
                    }

                    exit {
                        ALTSEL_Active = False
                    }

                    default state CAPTURE {}

                    state TRACK {
                        enter {
                            ALTSEL_Track = True
                        }

                        exit {
                            ALTSEL_Track = False
                        }
                    }
                }
            }

            trans Select {
                from CLEARED
                when {
                    VAPPR_Active = False and
                    VGA_Active = False and
                    ALT_Active = False
                }
                goto SELECTED
            }

            trans Capture {
                from SELECTED/ARMED
                when ALTSEL_Capture_Condition_Met = True
                goto SELECTED/ACTIVE
                send New_Vertical_Mode_Activated
            }

            trans Track {
                from SELECTED/ACTIVE/CAPTURE
                when ALTSEL_Track_Condition_Met = True
                goto SELECTED/ACTIVE/TRACK
            }

            trans Clear {
                from SELECTED
                when {
                    VAPPR_Active = True or
                    VGA_Active = True or
                    ALT_Active = True or
                    Modes_On = False
                }
                goto CLEARED
            }

            trans NewVerticalModeActivated {
                from SELECTED/ACTIVE
                on New_Vertical_Mode_Activated
                goto CLEARED
            }
        }

        /**
         * Captures and tracks the vertical guidance for Instrument
         * Landing System (ILS) precision glideslope approaches
         */
        conc VAPPR {
            default state CLEARED {}

            state SELECTED {
                enter {
                    VAPPR_Selected = True
                }

                exit {
                    VAPPR_Selected = False
                }

                default state ARMED {}

                state ACTIVE {
                    enter {
                        VAPPR_Active = True
                    }

                    exit {
                        VAPPR_Active = False
                    }
                }
            }

            trans Select {
                from CLEARED
                when APPR_Switch_Pressed = True
                goto SELECTED
            }

            trans Capture {
                from SELECTED/ARMED
                when {
                    VAPPR_Capture_Condition_Met = True and
                    LAPPR_Active = True and
                    Overspeed = False
                }
                goto SELECTED/ACTIVE
                send New_Vertical_Mode_Activated
            }

            trans Clear {
                from SELECTED
                when {
                    APPR_Switch_Pressed = True or
                    LAPPR_Selected = False or
                    Selected_NAV_Source_Changed = True or
                    Selected_NAV_Frequency_Changed = True or
                    Pilot_Flying_Transfer = True or
                    Modes_On = False
                }
                goto CLEARED
            }

            trans NewVerticalModeActivated {
                from SELECTED/ACTIVE
                on New_Vertical_Mode_Activated
                goto CLEARED
            }
        }

        /**
         * Maintains a fixed pitch angle when the pilot aborts a landing
         */
        conc VGA {
            default state CLEARED {}

            state SELECTED {
                enter {
                    VGA_Selected = True
                }

                exit {
                    VGA_Selected = False
                }

                default state ACTIVE {
                    enter {
                        VGA_Active = True
                    }

                    exit {
                        VGA_Active = False
                    }
                }
            }

            trans Select {
                from CLEARED
                when GA_Switch_Pressed = True and Overspeed = False
                goto SELECTED
                send New_Vertical_Mode_Activated
            }

            trans Clear {
                from SELECTED
                when {
                    When_AP_Engaged = True or
                    SYNC_Switch_Pressed = True or
                    VS_Pitch_Wheel_Rotated = True or
                    Pilot_Flying_Transfer = True or
                    Modes_On = False
                }
                goto CLEARED
            }

            trans NewVerticalModeActivated {
                from SELECTED/ACTIVE
                on New_Vertical_Mode_Activated
                goto CLEARED
            }
        }

        /**
         * Holds the aircraft at the fixed pitch angle it is in when the mode
         * becomes active or when the SYNC switch is pressed.
         */
        conc PITCH {

            pred VerticalModeActive {
                VS_Active = True or
                FLC_Active = True or
                ALT_Active= True or
                ALTSEL_Active = True or
                VAPPR_Active = True or
                VGA_Active = True
            }

            state CLEARED {}

            default state SELECTED {
                enter {
                    PITCH_Selected = True
                }

                exit {
                    PITCH_Selected = False
                }

                default state ACTIVE {
                    enter {
                        PITCH_Active = True
                    }

                    exit {
                        PITCH_Active = False
                    }
                }
            }

            trans Select {
                from CLEARED
                when !VerticalModeActive
                goto SELECTED
            }

            trans Clear {
                from SELECTED/ACTIVE
                when VerticalModeActive
                goto CLEARED
            }
        }
    }
}
