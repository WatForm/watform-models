/* The Railway case study - Dash model

Copyright (c) 2020 Amin Bandali <bandali@uwaterloo.ca>
Copyright (c) 2020 Nancy Day <nday@uwaterloo.ca>

This file is part of the Railway Dash model.

The Railway Dash model is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

The Railway Dash model is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Railway Dash model.  If not, see
<https://www.gnu.org/licenses/>.


The Railway case study (train scheduling deadlock avoidance model) is
described in~\cite{DBLP:journals/sttt/MazzantiFS18} by Frappier et al.
The Railway Dash model is an adaptation of the original model(s)
presented there.

@Article{DBLP:journals/sttt/MazzantiFS18,
  author    = {Franco Mazzanti and Alessio Ferrari and Giorgio Oronzo
                  Spagnolo},
  title     = {Towards formal methods diversity in railways: an
                  experience report with seven frameworks},
  year      = 2018,
  volume    = 20,
  number    = 3,
  pages     = {263-288},
  doi       = {10.1007/s10009-018-0488-3},
  url       = {https://doi.org/10.1007/s10009-018-0488-3},
  journal   = {{STTT}},
  timestamp = {Fri, 30 Nov 2018 13:26:45 +0100},
  biburl    = {https://dblp.org/rec/bib/journals/sttt/MazzantiFS18},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

This model has appeared in the following publications:

@mastersthesis{bandali2020,
  type      = {{MMath} thesis},
  author    = {Amin Bandali},
  title     = {{A Comprehensive Study of Declarative Modelling Languages}},
  school    = "University of Waterloo, David R. Cheriton School of Computer Science",
  year      = 2020,
  month     = {July},
  publisher = "UWSpace",
  url       = {http://hdl.handle.net/10012/16059},
  note      = {\url{http://hdl.handle.net/10012/16059} and
                  \url{https://bndl.org/mmath}},
  pdf       = {https://p.bndl.org/bandali-mmath-thesis.pdf}
}

*/

open util/integer

abstract sig Train {}
one sig t0, t1, t2, t3, t4, t5, t6, t7 extends Train {}

abstract sig Station {}
one sig s1,  s2,  s3,  s4,  s5,  s6,  s7,  s8,  s9, s10,
        s11, s12, s13, s14, s15, s16, s17, s18, s19, s20,
        s21, s22, s23, s24, s25, s26, s27 extends Station {}

// let indices = { 0 + 1 + 2 + 3 + 4 + 5 + 6 }
// let rs = { 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 }
// let LA = 7
// let LB = 7

one sig Const {
    T0, T1, T2, T3, T4, T5, T6, T7: { 0 + 1 + 2 + 3 + 4 + 5 + 6 } -> Station,
    A0, A1, A2, A3, A4, A5, A6, A7,
    B0, B1, B2, B3, B4, B5, B6, B7: { 0 + 1 + 2 + 3 + 4 + 5 + 6 } -> { -1 + 0 + 1 }
}

state Railway {
    // Avoid multiple declarations on same line because of known bug
    P0: one { 0 + 1 + 2 + 3 + 4 + 5 + 6 }
    P1: one { 0 + 1 + 2 + 3 + 4 + 5 + 6 }
    P2: one { 0 + 1 + 2 + 3 + 4 + 5 + 6 }
    P3: one { 0 + 1 + 2 + 3 + 4 + 5 + 6 }
    P4: one { 0 + 1 + 2 + 3 + 4 + 5 + 6 }
    P5: one { 0 + 1 + 2 + 3 + 4 + 5 + 6 }
    P6: one { 0 + 1 + 2 + 3 + 4 + 5 + 6 }
    P7: one { 0 + 1 + 2 + 3 + 4 + 5 + 6 }

    RA: one { 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 }
    RB: one { 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 }
    // The environment chooses which train to move next
    env ct: one Train

    invariant constants {
        // train missions
        Const.T0 = { 0->s1  + 1->s9  + 2->s10 + 3->s13 + 4->s15 + 5->s20 + 6->s23 }
        Const.T1 = { 0->s3  + 1->s9  + 2->s10 + 3->s13 + 4->s15 + 5->s20 + 6->s24 }
        Const.T2 = { 0->s5  + 1->s27 + 2->s11 + 3->s13 + 4->s16 + 5->s20 + 6->s25 }
        Const.T3 = { 0->s7  + 1->s27 + 2->s11 + 3->s13 + 4->s16 + 5->s20 + 6->s26 }
        Const.T4 = { 0->s23 + 1->s22 + 2->s17 + 3->s18 + 4->s11 + 5->s9  + 6->s2 }
        Const.T5 = { 0->s24 + 1->s22 + 2->s17 + 3->s18 + 4->s11 + 5->s9  + 6->s4 }
        Const.T6 = { 0->s25 + 1->s22 + 2->s17 + 3->s18 + 4->s12 + 5->s27 + 6->s6 }
        Const.T7 = { 0->s26 + 1->s22 + 2->s17 + 3->s18 + 4->s12 + 5->s27 + 6->s8 }
        // region A train constraints
        Const.A0 = { 0->0 + 1->0 + 2->0 + 3->1  + 4->0  + 5->-1 + 6->0 }
        Const.A1 = { 0->0 + 1->0 + 2->0 + 3->1  + 4->0  + 5->-1 + 6->0 }
        Const.A2 = { 0->0 + 1->0 + 2->1 + 3->-1 + 4->0  + 5->1  + 6->0 }
        Const.A3 = { 0->0 + 1->0 + 2->1 + 3->-1 + 4->0  + 5->0  + 6->0 }
        Const.A4 = { 0->0 + 1->1 + 2->0 + 3->0  + 4->-1 + 5->0  + 6->0 }
        Const.A5 = { 0->0 + 1->1 + 2->0 + 3->0  + 4->-1 + 5->0  + 6->0 }
        Const.A6 = { 0->0 + 1->0 + 2->0 + 3->-1 + 4->0  + 5->0  + 6->0 }
        Const.A7 = { 0->0 + 1->1 + 2->0 + 3->-1 + 4->0  + 5->0  + 6->0 }
        // region B train constraints
        Const.B0 = { 0->0 + 1->0 + 2->0 + 3->1  + 4->0  + 5->-1 + 6->0 }
        Const.B1 = { 0->0 + 1->0 + 2->0 + 3->1  + 4->0  + 5->-1 + 6->0 }
        Const.B2 = { 0->0 + 1->0 + 2->1 + 3->-1 + 4->0  + 5->0  + 6->0 }
        Const.B3 = { 0->0 + 1->0 + 2->1 + 3->-1 + 4->0  + 5->1  + 6->0 }
        Const.B4 = { 0->0 + 1->1 + 2->0 + 3->0  + 4->-1 + 5->0  + 6->0 }
        Const.B5 = { 0->0 + 1->1 + 2->0 + 3->0  + 4->-1 + 5->0  + 6->0 }
        Const.B6 = { 0->0 + 1->1 + 2->0 + 3->-1 + 4->0  + 5->0  + 6->0 }
        Const.B7 = { 0->0 + 1->0 + 2->0 + 3->-1 + 4->0  + 5->0  + 6->0 }
    }

    trans move_train0 {
        when {
            // t0 was chosen
            ct = t0
            // t0 hasn't reached end of its mission
            P0 < 6
            // next stop of t0 isn't occupied by any other train
            Const.T0[(P0.plus[1])] != Const.T1[P1] and
            Const.T0[(P0.plus[1])] != Const.T2[P2] and
            Const.T0[(P0.plus[1])] != Const.T3[P3] and
            Const.T0[(P0.plus[1])] != Const.T4[P4] and
            Const.T0[(P0.plus[1])] != Const.T5[P5] and
            Const.T0[(P0.plus[1])] != Const.T6[P6] and
            Const.T0[(P0.plus[1])] != Const.T7[P7]
            // progress of t0 will not saturate A or B
            (RA.plus[(Const.A0[(P0.plus[1])])]).lte[7] // LA
            (RB.plus[(Const.B0[(P0.plus[1])])]).lte[7] // LB
        }
        do {
            P0' = P0.plus[1]
            RA' = RA.plus[(Const.A0[P0'])]
            RB' = RB.plus[(Const.B0[P0'])]
        }
    }

    trans move_train1 {
        when {
            // t1 was chosen
            ct = t1
            // t1 hasn't reached end of its mission
            P1 < 6
            // next stop of t1 isn't occupied by any other train
            Const.T1[(P1.plus[1])] != Const.T0[P0] and
            Const.T1[(P1.plus[1])] != Const.T2[P2] and
            Const.T1[(P1.plus[1])] != Const.T3[P3] and
            Const.T1[(P1.plus[1])] != Const.T4[P4] and
            Const.T1[(P1.plus[1])] != Const.T5[P5] and
            Const.T1[(P1.plus[1])] != Const.T6[P6] and
            Const.T1[(P1.plus[1])] != Const.T7[P7]
            // progress of t1 will not saturate A or B
            (RA.plus[(Const.A1[(P1.plus[1])])]).lte[7] // LA
            (RB.plus[(Const.B1[(P1.plus[1])])]).lte[7] // LB
        }
        do {
            P1' = P1.plus[1]
            RA' = RA.plus[(Const.A1[P1'])]
            RB' = RB.plus[(Const.B1[P1'])]
        }
    }

    trans move_train2 {
        when {
            // t2 was chosen
            ct = t2
            // t2 hasn't reached end of its mission
            P2 < 6
            // next stop of t2 isn't occupied by any other train
            Const.T2[(P2.plus[1])] != Const.T0[P0] and
            Const.T2[(P2.plus[1])] != Const.T1[P1] and
            Const.T2[(P2.plus[1])] != Const.T3[P3] and
            Const.T2[(P2.plus[1])] != Const.T4[P4] and
            Const.T2[(P2.plus[1])] != Const.T5[P5] and
            Const.T2[(P2.plus[1])] != Const.T6[P6] and
            Const.T2[(P2.plus[1])] != Const.T7[P7]
            // progress of t2 will not saturate A or B
            (RA.plus[(Const.A2[(P2.plus[1])])]).lte[7] // LA
            (RB.plus[(Const.B2[(P2.plus[1])])]).lte[7] // LB
        }
        do {
            P2' = P2.plus[1]
            RA' = RA.plus[(Const.A2[P2'])]
            RB' = RB.plus[(Const.B2[P2'])]
        }
    }

    trans move_train3 {
        when {
            // t3 was chosen
            ct = t3
            // t3 hasn't reached end of its mission
            P3 < 6
            // next stop of t3 isn't occupied by any other train
            Const.T3[(P3.plus[1])] != Const.T0[P0] and
            Const.T3[(P3.plus[1])] != Const.T1[P1] and
            Const.T3[(P3.plus[1])] != Const.T2[P2] and
            Const.T3[(P3.plus[1])] != Const.T4[P4] and
            Const.T3[(P3.plus[1])] != Const.T5[P5] and
            Const.T3[(P3.plus[1])] != Const.T6[P6] and
            Const.T3[(P3.plus[1])] != Const.T7[P7]
            // progress of t3 will not saturate A or B
            (RA.plus[(Const.A3[(P3.plus[1])])]).lte[7] // LA
            (RB.plus[(Const.B3[(P3.plus[1])])]).lte[7] // LB
        }
        do {
            P3' = P3.plus[1]
            RA' = RA.plus[(Const.A3[P3'])]
            RB' = RB.plus[(Const.B3[P3'])]
        }
    }

    trans move_train4 {
        when {
            // t4 was chosen
            ct = t4
            // t4 hasn't reached end of its mission
            P4 < 6
            // next stop of t4 isn't occupied by any other train
            Const.T4[(P4.plus[1])] != Const.T0[P0] and
            Const.T4[(P4.plus[1])] != Const.T1[P1] and
            Const.T4[(P4.plus[1])] != Const.T2[P2] and
            Const.T4[(P4.plus[1])] != Const.T3[P3] and
            Const.T4[(P4.plus[1])] != Const.T5[P5] and
            Const.T4[(P4.plus[1])] != Const.T6[P6] and
            Const.T4[(P4.plus[1])] != Const.T7[P7]
            // progress of t4 will not saturate A or B
            (RA.plus[(Const.A4[(P4.plus[1])])]).lte[7] // LA
            (RB.plus[(Const.B4[(P4.plus[1])])]).lte[7] // LB
        }
        do {
            P4' = P4.plus[1]
            RA' = RA.plus[(Const.A4[P4'])]
            RB' = RB.plus[(Const.B4[P4'])]
        }
    }

    trans move_train5 {
        when {
            // t5 was chosen
            ct = t5
            // t5 hasn't reached end of its mission
            P5 < 6
            // next stop of t5 isn't occupied by any other train
            Const.T5[(P5.plus[1])] != Const.T0[P0] and
            Const.T5[(P5.plus[1])] != Const.T1[P1] and
            Const.T5[(P5.plus[1])] != Const.T2[P2] and
            Const.T5[(P5.plus[1])] != Const.T3[P3] and
            Const.T5[(P5.plus[1])] != Const.T4[P4] and
            Const.T5[(P5.plus[1])] != Const.T6[P6] and
            Const.T5[(P5.plus[1])] != Const.T7[P7]
            // progress of t5 will not saturate A or B
            (RA.plus[(Const.A5[(P5.plus[1])])]).lte[7] // LA
            (RB.plus[(Const.B5[(P5.plus[1])])]).lte[7] // LB
        }
        do {
            P5' = P5.plus[1]
            RA' = RA.plus[(Const.A5[P5'])]
            RB' = RB.plus[(Const.B5[P5'])]
        }
    }

    trans move_train6 {
        when {
            // t6 was chosen
            ct = t6
            // t6 hasn't reached end of its mission
            P6 < 6
            // next stop of t6 isn't occupied by any other train
            Const.T6[(P6.plus[1])] != Const.T0[P0] and
            Const.T6[(P6.plus[1])] != Const.T1[P1] and
            Const.T6[(P6.plus[1])] != Const.T2[P2] and
            Const.T6[(P6.plus[1])] != Const.T3[P3] and
            Const.T6[(P6.plus[1])] != Const.T4[P4] and
            Const.T6[(P6.plus[1])] != Const.T5[P5] and
            Const.T6[(P6.plus[1])] != Const.T7[P7]
            // progress of t6 will not saturate A or B
            (RA.plus[(Const.A6[(P6.plus[1])])]).lte[7] // LA
            (RB.plus[(Const.B6[(P6.plus[1])])]).lte[7] // LB
        }
        do {
            P6' = P6.plus[1]
            RA' = RA.plus[(Const.A6[P6'])]
            RB' = RB.plus[(Const.B6[P6'])]
        }
    }

    trans move_train7 {
        when {
            // t7 was chosen
            ct = t7
            // t7 hasn't reached end of its mission
            P7 < 6
            // next stop of t7 isn't occupied by any other train
            Const.T7[(P7.plus[1])] != Const.T0[P0] and
            Const.T7[(P7.plus[1])] != Const.T1[P1] and
            Const.T7[(P7.plus[1])] != Const.T2[P2] and
            Const.T7[(P7.plus[1])] != Const.T3[P3] and
            Const.T7[(P7.plus[1])] != Const.T4[P4] and
            Const.T7[(P7.plus[1])] != Const.T5[P5] and
            Const.T7[(P7.plus[1])] != Const.T6[P6]
            // progress of t7 will not saturate A or B
            (RA.plus[(Const.A7[(P7.plus[1])])]).lte[7] // LA
            (RB.plus[(Const.B7[(P7.plus[1])])]).lte[7] // LB
        }
        do {
            P7' = P7.plus[1]
            RA' = RA.plus[(Const.A7[P7'])]
            RB' = RB.plus[(Const.B7[P7'])]
        }
    }

    trans choose_train {
        do {
            // A implies B else C == (A and B) or ((not A) and C)

            // safe to omit the `not' part of the checks below, since
            // at any given time only one left conjunct can be true
            // (because no two trains in t0..t7 are equal)

            (ct = t0 and ct' = t1)
            or (ct = t1 and ct' = t2)
            or (ct = t2 and ct' = t3)
            or (ct = t3 and ct' = t4)
            or (ct = t4 and ct' = t5)
            or (ct = t5 and ct' = t6)
            or (ct = t6 and ct' = t7)
            or (ct = t7 and ct' = t0)
        }
    }

    init {
        P0 = 0
        P1 = 0
        P2 = 0
        P3 = 0
        P4 = 0
        P5 = 0
        P6 = 0
        P7 = 0
        RA = 1
        RB = 1
    }
}

