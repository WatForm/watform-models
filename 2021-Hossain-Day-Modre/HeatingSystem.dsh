/*
MIT License

Copyright (c) [2021] [Tamjid Hossain]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. */

open util/boolean

conc state HeatingSystem {
	env event Reset {}
	env event TurnOn {}

	state Error {
		on Reset
		goto Off
	}
	default state Off {
		on TurnOn
		goto On
	}

	state On {
		conc state Room [RoomID] {
	
			condition tooCold[...] {}
			condition tooHot[...] {}
			condition waitedForCool[...] {}
			condition waitedForWarm[...] {}
			action adjValve[...] {}
			env event TurnOn {}

			default state Off {
				on TurnOn
				goto No_Heat_Requested
			}
	
			state No_Heat_Requested {
				default state Idle_No_Heat {
					trans T8 {
						on tooCold
						do adjValve
						goto Wait_For_Heat
					}
				}
	
				state Wait_For_Heat {
					trans T9 {
						on !tooCold
						goto Idle_No_Heat
					}
					
					trans T10 {
						on waitedForWarm
						do adjValve
					}
				}
	
			}
	
			state Heat_Requested {
				default state Idle_Heating {
					trans T15 {
						on tooHot
						do adjValce
						goto Wait_For_Cool
					}
				}
	
				state Wait_For_Cool {
					trans T14 {
						on !tooHot
						goto Idle_Heating
					}
	
					trans T13 {
						on waitedForCool
						do adjValve
					}
	
					trans T11 {
						on { 
							waitedForCool
							vClosed
							cancelrH
						}
						goto HeatingSystem/No_Heat_Requested
					}
	
					trans T12 {
						on {
							waitedForWarm
							vOpen
							rH
						}
						goto HeatingSystem/Heat_Requested
					}
				}
	
			}	
	
		}

		conc state Controller {

			event furnaceReset {}
			event deactive {}
			env event heatSwitch {}
			env event userReset {}
			env event roomNeedsHeat {}
			env event heatSwitchOff {}
			env event furnaceFault {}
			env event noRoomNeedsHeat {}
			env event furnaceRunning {}
			env event Fail {}
	
			default state Off{
				trans T17 {
					on heatSwitch
					goto Controller_On
				}
			}
	
			state Controller_On{
				default state Idle{
					trans T20 {
						on roomNeedsHeat
						goto 
					}
				}
	
				trans T18 {
					on heatSwitchOff
					goto Controller/Off
					send deactivate
				}
	
				trans T19 {
					on furnaceFault
					goto HeatingSystem/Error
				}
	
				state Heater_Active{
					trans T22 {
						on noRoomNeedsHeat
						goto Idle
					}
	
					state Activating_Heater{
						trans T21 {
							on furnaceRunning
							goto Heater_Running
						}
					}
					state Heater_Running{}
				}
			}
		}

	}

}
