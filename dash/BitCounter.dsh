/*******************************************************************************
 * Title: BitCounter.dsh
 * Authors: Jose Serna
 * Created: 14-04-2018
 * Updated for use in the Alloy Analyzer (extended with Dash): 2022-02-10
 *
 * Notes: Two bit counter model taken from Shahram's PhD thesis
 *
 *        Shahram Esmaeilsabzali. Perscriptive Semantics for Big-Step Modelling Languages.
 *        PhD thesis, University of Waterloo, David R. Cheriton School of Computer Science, 2011
 *        https://cs.uwaterloo.ca/~nday/pdf/theses/2011-esmaeilsabzali-phd-thesis.pdf
 *
 ******************************************************************************/

conc state Counter {
    env event Tk0 {}

    conc state Bit1 {
        event Tk1 {}

        default state Bit11 {
    		trans T1 {
            		on Tk0
            		goto Bit12
        	}
	}

        state Bit12 {
	        trans T2 {
                     on Tk0
                     goto Bit11
                     send Tk1
               }
        }
    }
    conc state Bit2 {
        event Done {}

        default state Bit21 {
        	trans T3 {
                      on Bit1/Tk1
            		goto Bit22
        	}
	}
       state Bit22 {
              trans T4 {
                     on Bit1/Tk1
                     goto Bit21
                     send Done
              }
       }
    }
}

// These require the  Generate Significance axioms option to be enabled
run reachabilityAxiom for 7 Snapshot, exactly 2 EventLabel

run operationsAxiom for 7 Snapshot, exactly 2 EventLabel

// Because the above are satisfied, 
// the bitcounter has a significant scope of 7 Snapshots
// so we use 6 snapshots for the properties below.

// CTL property: when done is generated then in basic states Bit11 and Bit21

assert final_bitStatus {
    all s: Snapshot| s.stable = True and Counter_Bit2_Done in s.events =>
        {Counter_Bit1_Bit11 + Counter_Bit2_Bit21} in s.conf
}
check final_bitStatus for 7 Snapshot, exactly 2 EventLabel expect 0


// TCMC m/c: requires TCMC option to be enabled
// the same property as above but phrases in CTL and using TCMC
assert ctl_final_bitStatus {
    ctl_mc[
      ag[
        {s: Snapshot | 
        Counter_Bit2_Done in s.events =>
        Counter_Bit1_Bit11 + Counter_Bit2_Bit21 in s. conf
        }
      ]
    ]
}
check ctl_final_bitStatus for 7 Snapshot, exactly 2 EventLabel expect 0

//  if the event Tk0 is generated, then eventually a transition is taken from a stable state
assert model_responsive {
    all s: Snapshot | Counter_Tk0 in s.events  =>
       some s_next: s.*nextStep | s_next.stable = True and
                    (Counter_Bit1_Bit11_T1 in s_next.taken or
                    Counter_Bit1_Bit12_T2 in s_next.taken or
                    Counter_Bit2_Bit21_T3 in s_next.taken or
                    Counter_Bit2_Bit22_T4 in s_next.taken)
}
check model_responsive for 7 Snapshot, exactly 2 EventLabel expect 0

// Same property as above but phrased in CTL
assert ctl_model_responsive {
    ctl_mc[
        ag[
            imp_ctl[
                {s: Snapshot| Counter_Tk0 in s.events},
                ef[{s: Snapshot |
                    s.stable = True and
                    (Counter_Bit1_Bit11_T1 in s.taken or
                    Counter_Bit1_Bit12_T2 in s.taken or
                    Counter_Bit2_Bit21_T3 in s.taken or
                    Counter_Bit2_Bit22_T4 in s.taken)
                }]
            ]
        ]
    ]
}
check ctl_model_responsive for 7 Snapshot, exactly 2 EventLabel expect 0

