/* The Landing Gear case study - Dash model

Copyright (c) 2020 Amin Bandali <bandali@uwaterloo.ca>
Copyright (c) 2020 Nancy Day <nday@uwaterloo.ca>

This file is part of the Landing Gear Dash model.

The Landing Gear Dash model is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

The Landing Gear Dash model is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Landing Gear Dash model.  If not, see
<https://www.gnu.org/licenses/>.


The Landing Gear management case study is described in
\cite{DBLP:conf/asm/BoniolW14} by Boniol et al.

@inproceedings{DBLP:conf/asm/BoniolW14,
  author    = {Fr{\'{e}}d{\'{e}}ric Boniol and
               Virginie Wiels},
  editor    = {Fr{\'{e}}d{\'{e}}ric Boniol and
               Virginie Wiels and
               Yamine A{\"{\i}}t Ameur and
               Klaus{-}Dieter Schewe},
  title     = {The Landing Gear System Case Study},
  booktitle = {{ABZ} 2014: The Landing Gear Case Study - Case Study Track, Held at
               the 4th International Conference on Abstract State Machines, Alloy,
               B, TLA, VDM, and Z, Toulouse, France, June 2-6, 2014. Proceedings},
  series    = {Communications in Computer and Information Science},
  volume    = {433},
  pages     = {1--18},
  publisher = {Springer},
  year      = {2014},
  url       = {https://doi.org/10.1007/978-3-319-07512-9\_1},
  doi       = {10.1007/978-3-319-07512-9\_1},
  timestamp = {Tue, 07 May 2019 12:19:36 +0200},
  biburl    = {https://dblp.org/rec/conf/asm/BoniolW14.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

The Landing Gear Dash model is an adaptation of the AsmetaL one
described in \cite{DBLP:conf/asm/ArcainiGR14} by Arcaini et al.

@inproceedings{DBLP:conf/asm/ArcainiGR14,
  author    = {Paolo Arcaini and
               Angelo Gargantini and
               Elvinia Riccobene},
  editor    = {Fr{\'{e}}d{\'{e}}ric Boniol and
               Virginie Wiels and
               Yamine A{\"{\i}}t Ameur and
               Klaus{-}Dieter Schewe},
  title     = {Modeling and Analyzing Using ASMs: The Landing Gear System Case Study},
  booktitle = {{ABZ} 2014: The Landing Gear Case Study - Case Study Track, Held at
               the 4th International Conference on Abstract State Machines, Alloy,
               B, TLA, VDM, and Z, Toulouse, France, June 2-6, 2014. Proceedings},
  series    = {Communications in Computer and Information Science},
  volume    = {433},
  pages     = {36--51},
  publisher = {Springer},
  year      = {2014},
  url       = {https://doi.org/10.1007/978-3-319-07512-9\_3},
  doi       = {10.1007/978-3-319-07512-9\_3},
  timestamp = {Wed, 29 May 2019 09:35:57 +0200},
  biburl    = {https://dblp.org/rec/conf/asm/ArcainiGR14.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

This model has appeared in the following publications:

TODO

*/

// must run with TCMC option turned on for translation to Alloy

enum HandleStatus {UP, DOWN}
enum DoorStatus {CLOSED, OPENING, OPEN, CLOSING}
enum GearStatus {RETRACTED, EXTENDING, EXTENDED, RETRACTING}

pred close_door[d1, d2: DoorStatus] {
    d1 = OPEN implies d2 = CLOSING
    else d1 = CLOSING implies d2 = CLOSED
    else d1 = OPENING implies d2 = CLOSING
}

conc state LandingGear {
    env handle: one HandleStatus
    doors: one DoorStatus
    gears: one GearStatus

    trans retraction_sequence {
        when handle = UP
        do {
            gears != RETRACTED implies {
                doors = CLOSED implies doors' = OPENING
                else doors = CLOSING implies doors' = OPENING
                else doors = OPEN implies {
                    gears = EXTENDED implies gears' = RETRACTING
                    else gears = RETRACTING implies gears' = RETRACTED
                    else gears = EXTENDING implies gears' = RETRACTING
                }
            }
            else close_door[doors, doors']
        }
    }

    trans outgoing_sequence {
        when handle != UP
        do {
            gears != EXTENDED implies {
                doors = CLOSED implies doors' = OPENING
                else doors = OPENING implies doors' = OPEN
                else doors = OPEN implies {
                    gears = RETRACTED implies gears' = EXTENDING
                    else gears = EXTENDING implies gears' = EXTENDED
                    else gears = RETRACTING implies gears' = EXTENDING
                }
            }
            else close_door[doors, doors']
        }
    }

    invariant {
        (gears = EXTENDING or gears = RETRACTING) implies doors = OPEN
    }

    invariant {
        doors = CLOSED implies (gears = EXTENDED or gears = RETRACTED)
    }

    init {
        doors = CLOSED
        gears = EXTENDED
    }
}


assert R11_bis {
    ctl_mc[
     ag[
        imp_ctl[
            ag[{s:Snapshot | LandingGear_handle = DOWN}],
            af[{s:Snapshot | LandingGear_gears = EXTENDED and LandingGear_doors = CLOSED}]
        ]
     ]
    ]        
}

assert R12_bis {
    ctl_mc[
     ag[
        imp_ctl[
            ag[{s:Snapshot | LandingGear_handle = UP}],
            af[{s:Snapshot | LandingGear_gears = RETRACTED and LandingGear_doors = CLOSED}]
        ]
     ]
    ]   
}

assert R21 {
    ctl_mc[
     ag[
        imp_ctl[
            ag[{s:Snapshot | LandingGear_handle = DOWN}],
            ax[ag[{s:Snapshot | LandingGear_gears = RETRACTING}]]
        ]
     ]
    ] 
}

assert R22 {
    ctl_mc[
     ag[
        imp_ctl[
            ag[{s:Snapshot | LandingGear_handle = UP}],
            ax[ag[{s:Snapshot | LandingGear_gears != EXTENDING}]]
        ]
     ]
    ] 
}
